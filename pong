#!/usr/bin/python

# Copyright (c) 2017 Samuel Thibault <samuel.thibault@ens-lyon.org>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY Samuel Thibault ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

import sys
import pygame
import socket
import random
import time
import signal

port = 4242

def connect(serv, port):
    while True:
        try:
            s.connect((sys.argv[1], port))
            return 1
        except:
            timeSleep = random.randrange(1,10)
            time.sleep(timeSleep)
            pass

def fermerConnexion(signal, frame):
    finDuGame = 'clientDisconnect*'
    s.send(finDuGame)
    sys.exit(0)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# args and connection
if len(sys.argv) != 2:
	print('Error, not expected arguments')
else:
	serv = sys.argv[1]
	connect(serv, port)

signal.signal(signal.SIGINT,fermerConnexion)


# Get the player pos
playerPos = s.recv(1024).decode('utf-8')

# Screen setup

width = 800
height = 600

clay = (0xFF, 0x40, 0)

ball_speed = [ -3, -3 ]
racket_speed = [ 0, 2 ]

racketClient1_speed = [0, 0]

# Pygame initialization
pygame.init()
screen = pygame.display.set_mode( (width, height) )

# Load resources
ball = pygame.image.load("image/ball.png")
ball_coords = ball.get_rect()

racket = pygame.image.load("image/racket.png")
racket_coords = racket.get_rect()
racketClient1 = pygame.image.load("image/racket.png")
racketClient1_coords = racketClient1.get_rect()
racketClient1_coords.right = width -1

if playerPos == "Right":
    racket = pygame.image.load("image/racket.png")
    racket_coords = racket.get_rect()
    racket_coords.right = width-1
    racketClient1 = pygame.image.load("image/racket.png")
    racketClient1_coords = racketClient1.get_rect()
# Throw ball from center
def throw():
    ball_coords.left = 2*width/3
    ball_coords.top = height/2

print ball_coords

play = b'False'
play = s.recv(1024)
if play == b'True' and playerPos == 'Left':
    throw()
    #print 'received play'
while True:
    for e in pygame.event.get():
        # Check for exit
        if e.type == pygame.QUIT:
            sys.exit()

        # Check for racket movements
        elif e.type == pygame.KEYDOWN:
            if e.key == pygame.K_UP:
                racket_speed[1] = -4
                pass
            elif e.key == pygame.K_DOWN:
                racket_speed[1] = 4
                pass

        elif e.type == pygame.KEYUP:
            if e.key == pygame.K_UP:
                racket_speed[1] = 0
                pass
            elif e.key == pygame.K_DOWN:
                racket_speed[1] = 0
                pass
        #else:
        #    print(e)
    if playerPos == "Left":
        # Move ball
        ball_coords = ball_coords.move(ball_speed)
        # Bounce ball on walls
        if ball_coords.left < 0 or ball_coords.right >= width:
            ball_speed[0] = -ball_speed[0]
        if ball_coords.top < 0 or ball_coords.bottom >= height:
            ball_speed[1] = -ball_speed[1]
        #print 'Ball coords left : ', ball_coords


        #print 'sending ball coords'
        coordsL = str(ball_coords.left) + '*'
        coordsB = str(ball_coords.bottom) + '*'
        #print coordsL, type(coordsL)
        #print coordsT, type(coordsT)

    # Move racket
    racket_coords = racket_coords.move(racket_speed) 
    v = str(racket_speed[1])
    if playerPos == 'Left':
        trame = coordsL + coordsB + v
        s.send(trame)
    else:
        s.send(v)
        #print 'sent speed'

    if playerPos == 'Left':
        vClient = s.recv(1024)
    else:
        #print 'waiting for ball coords...'
        received = s.recv(1024).split('*')
        #print 'Received : ', received
        coordsL = received[0]
        coordsB = received[1]
        vClient = received[2]
        ball_coords.left = int(coordsL) if coordsL != '' else 0
        ball_coords.bottom = int(coordsB) if coordsB != '' else 0
        #print 'Ball coords Right : ', ball_coords

    #print "Vitesse client : ", vClient
    if vClient != '':
        speed = int(vClient) if vClient != 'clientDisconnect' else 0
    else:
        speed = 0
    #print "Type speed : ", type(speed)
    racketClient1_speed[1] = speed
    #print "racketClient1_speed : ", racketClient1_speed
    racketClient1_coords = racketClient1_coords.move(racketClient1_speed)

    # Clip racket on court
    if racket_coords.left < 0:
        racket_coords.left = 0
    elif racket_coords.right >= width:
        racket_coords.right = width-1
    if racket_coords.top < 0:
        racket_coords.top = 0
    elif racket_coords.bottom >= height:
        racket_coords.bottom = height-1

    if racketClient1_coords.left < 0:
        racketClient1_coords.left = 0
    elif racketClient1_coords.right >= width:
        racketClient1_coords.right = width-1
    if racketClient1_coords.top < 0:
        racketClient1_coords.top = 0
    elif racketClient1_coords.bottom >= height:
        racketClient1_coords.bottom = height-1

    # Racket reached racket position?
    if playerPos == 'Left':
        if ball_coords.left <= 0:
            if ball_coords.bottom <= racket_coords.top or ball_coords.top >= racket_coords.bottom:
                print "Perdu..."
                throw()
        if ball_coords.right >= width:
            if ball_coords.bottom <= racketClient1_coords.top or ball_coords.top >= racketClient1_coords.bottom:
                print "Gagne !!!"
                throw()
    else:
        if ball_coords.left <= 0:
            if ball_coords.bottom <= racketClient1_coords.top or  ball_coords.top >= racketClient1_coords.bottom:
                print "Gagne !!!!!"
        if ball_coords.right >= width:
            if ball_coords.bottom <= racket_coords.top or ball_coords.top >= racket_coords.bottom:
                print "Perdu..."

    # Display everything
    screen.fill(clay)
    screen.blit(ball, ball_coords)
    screen.blit(racket, racket_coords)
    screen.blit(racketClient1, racketClient1_coords)
    pygame.display.flip()

    # sleep 10ms, since there is no need for more than 100Hz refresh :)
    pygame.time.delay(10)
